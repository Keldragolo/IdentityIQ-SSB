<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Group Refresh Rule-NonRequestable Ents" type="GroupAggregationRefresh">
  <Description>This rule is used to set the owner or modify the account group before it is persisted to the database.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="obj" type="ResourceObject">
        <Description>
          A sailpoint.object.ResourceObject generated from the application
          and the ProvisioningPlan's ObjectRequest.
        </Description>
      </Argument>
      <Argument name="accountGroup" type="ManagedAttribute">
        <Description>
          The account group being refreshed.
        </Description>
      </Argument>
      <Argument name="groupApplication" type="Application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="accountGroup" type="ManagedAttribute">
        <Description>
          The refreshed account group object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import sailpoint.object.Custom;
import sailpoint.object.ManagedAttribute;
import sailpoint.object.Identity;
import java.util.Iterator;
import sailpoint.object.QueryOptions;
import sailpoint.object.Filter;

import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

//Log log = LogFactory.getLog("com.GroupAggregationRefreshRule");
log.debug("Entering Group Aggregation Refresh Rule");

String customName="Group Aggregation Applications Custom Object";

String appName=accountGroup.getApplication().getName();
//log.debug("Application Name is:"+appName);

Custom custom=context.getObjectByName(Custom.class,customName);
Map map=custom.get("Group_Aggr_Apps");
if(map.containsKey(appName))
    {
		//String attributeType=map.get(appName);
		String entName = accountGroup.getValue();
		log.error("####Entitlement name###"+entName);
		QueryOptions qo = new QueryOptions();
		//qo.addFilter(Filter.eq("value", entName));
		//qo.addFilter(Filter.eq("application.name", appName));
		qo.add(Filter.eq("value", entName));
		qo.add(Filter.eq("application.name", appName));
		Iterator entItr = context.search(ManagedAttribute.class,qo);
		if(entItr == null) {
			accountGroup.setRequestable(false);
		}
                else{
		ManagedAttribute managedAttribute=(ManagedAttribute)entItr.next();
		if(!managedAttribute.isRequestable()){
	    accountGroup.setRequestable(false);	
			}
		}
}
log.debug("Exiting Group Refresh Rule");
return accountGroup;</Source>
</Rule>