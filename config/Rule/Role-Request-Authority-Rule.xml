<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Role Request Authority Rule" type="RequestObjectSelector">
  <Description>Allows all objects to be selected (no filtering)</Description>
  <Signature returnType="sailpoint.object.Filter">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="requestor" type="sailpoint.object.Identity">
        <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
      </Argument>
      <Argument name="requestee" type="sailpoint.object.Identity">
        <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="filter">
        <Description>
          A Filter object that will be used to search for accessible request objects.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
  
  import sailpoint.object.QueryInfo;
  import sailpoint.object.Filter;
  import sailpoint.object.Application;
  import sailpoint.object.Link;
  import sailpoint.object.Attributes;
  import sailpoint.api.IdentityService;
  import java.sql.Connection;
  import java.sql.DriverManager;
  import java.sql.SQLException;
  import java.util.List;
  import java.util.ArrayList;
  import sailpoint.tools.JdbcUtil;
  import sailpoint.object.Identity;

  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory; 
	  
  log = LogFactory.getLog("com.swe.rap.approvalLibrary.routeInitialApprovals"); 
  log.debug("Entering rule SWE Role Request Authority Rule requestor: "+requestor);	
  log.debug("Entering rule SWE Role Request Authority Rule requestee: "+requestee);	

	List result = new ArrayList();
	QueryInfo finalQueryInfo;
  
  List filtersList = new ArrayList();
  finalQueryInfo = new QueryInfo(Filter.notnull("id"), false);
		
	Boolean isSystemAccount=false;		
  
 	 String type = "";
     if(requestee != null){
		type = requestee.getAttribute("sweAccountType");
          if(type!=null &amp;&amp; "system".equalsIgnoreCase(type)){
            isSystemAccount= true;
          } else{
            isSystemAccount= false;
          }
     
		if(isSystemAccount)
		{
		 filtersList.add(Filter.ignoreCase(Filter.and(Filter.ne("type", "job"),Filter.eq("sweRoleLOBAttribute", "SWE_ALL_ENTERPRISE"),Filter.or(Filter.eq("sweRoleLOBScope", "SWE_ALL_ENTERPRISE"),Filter.eq("sweRoleLOBScope", "SWE_ALL_HDP_SRVC")))));
		}
		else
		{
		   filtersList.add(Filter.ignoreCase(Filter.and(Filter.ne("type", "job"),Filter.eq("sweRoleLOBAttribute", "SWE_ALL_ENTERPRISE"),Filter.or(Filter.eq("sweRoleLOBScope", "SWE_ALL_ENTERPRISE"),Filter.eq("sweRoleLOBScope", "SWE_ALL_HDP_USER")))));
		}
		String did = requestee.getAttribute("sweDeptID");	
		log.error("did = " +did);


		if(did!=null &amp;&amp; !did.isEmpty())
		{
			String query = "sql:select trim(PROFILE_CODE) from IIQCAP1.PROFILE_TO_DEPT where DEPARTMENT_ID = '"+did+"'";
			Iterator iterator = context.search(query,null,null);
			if(iterator!=null)
			{
				while(iterator.hasNext())
				{
					result.add(iterator.next());
				}
			}

		}
		if(result != null &amp;&amp; result.size() > 0)
		{
			//If it is a Job Role, only check if the requestee’s DID belong to the Job Role’s DID.
			// Filter didFilter = Filter.ignoreCase(Filter.and(Filter.or(Filter.eq("type", "profile"),Filter.eq("type", "job")), (Filter.in("name", result))));
			Filter didFilter = Filter.ignoreCase(Filter.and(Filter.eq("type", "job"), Filter.in("name", result)));
			filtersList.add(didFilter);
		}
	}
	
	finalQueryInfo = new QueryInfo(Filter.or(filtersList), false);
	log.debug("Returning from rule SWE Role Request Authority Rule");
	return finalQueryInfo;
		
</Source>
</Rule>
