<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="UserID-and-Password-Creation" type="IdentityCreation">
  <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
  <Signature returnType="void">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
      <Argument name="account" type="ResourceObject">
        <Description>
          The resource account for the identity being created.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The identity that is being created.
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>import java.util.List;
  import java.util.Random;
  import sailpoint.object.Custom;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.tools.GeneralException;

  // change the name to a combination of firstname and lastname
  String firstname = account.getStringAttribute("givenName");
  String lastname = account.getStringAttribute("sn");

  static String getRandomUID(){
      String id =  firstname.substring(0,1) + lastname.substring(0,3);

      Random random = new Random();
      //array that will hold the symbols
      char[] symbols = null;

      StringBuilder tmp = new StringBuilder();
      for (char ch = '0'; ch &lt;= '9'; ++ch){
      tmp.append(ch);
      }

      symbols = tmp.toString().toCharArray();

      for (int idx = 0; idx &lt; 3; ++idx) 
        id += symbols[random.nextInt(symbols.length)];

  return id;

  }

  String getNewEnterpriseUUID( ) throws GeneralException{
  int count = 0;
  String uuid = getRandomUID();
    
  while( isDuplicate( uuid ) ){
  	uuid = getRandomUID();
  }
  return uuid.toLowerCase();
  }  

  boolean isDuplicate( String uuid ) throws GeneralException{
   
 		return isPresentInIIQ(uuid);
  }  

  boolean isPresentInIIQ(String uuid) throws GeneralException{

  QueryOptions ops = new QueryOptions();
  Filter nameFilter = Filter.or(Filter.eq("name", uuid), Filter.eq("name", uuid.toLowerCase()));
  Filter concatFilter=Filter.or(nameFilter,Filter.eq("name", uuid.toUpperCase()) );
  Filter caseFilter = Filter.ignoreCase(concatFilter);
  ops.addFilter(caseFilter);
  int numMatched = context.countObjects(Identity.class, ops);
  if(numMatched &gt; 0) {
  return true;
  }
  else {
  return false;
  }
  }  

  String mail= firstname + "." + lastname + "@sweinc.4u.com";

  identity.setEmail(mail);

  String uuid = getNewEnterpriseUUID();

  if( uuid != null )
       identity.setName( uuid );

  identity.setAttribute("employeeid",uuid);
  identity.setPassword("Smile@123");</Source>
</Rule>
</sailpoint>
