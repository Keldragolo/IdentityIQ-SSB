<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="User Correlation" type="Correlation">
  <Signature returnType="Map">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
      <Argument name="account">
        <Description>
          A sailpoint.object.ResourceObject returned from the
          collector.
        </Description>
      </Argument>
      <Argument name="link">
        <Description>
          Existing link to this account.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="identityName">
        <Description>
          The name of an Identity object.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
          A fully resolved Identity object if the rule wants
          to do its own queries to locate the identity.
        </Description>
      </Argument>
      <Argument name="identityAttributeName">
        <Description>
          The name of the extended attribute that can be used
          to locate an existing identity.
        </Description>
      </Argument>
      <Argument name="identityAttributeValue">
        <Description>
          The value of the named extended attribute that can be used
          to locate an existing identity. This attribute is used
          together with the identityAttributeName argument.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
	import sailpoint.object.Identity;
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory; 
	import sailpoint.object.Filter;
	import sailpoint.object.Filter.FilterCompiler;
	import java.util.Map;
	import java.util.List;
	import java.util.ArrayList;
	import java.util.Iterator;
	import sailpoint.object.QueryOptions;
	import sailpoint.object.Link;
	
	import sailpoint.api.Correlator;
	import sailpoint.object.Application;
	
	/**
	shortname = AD (Active Director)
	userName = 12345
	
	name= AD-12345
	
	**/

	Map correlationMap = new HashMap();
	//get System Account Indicator from feed
	String indicator = account.getAttribute("System Account Indicator");
	
	String appShortName = application.getStringAttributeValue("ShortName");
	String correlationKey = account.getStringAttribute("CorrelationKey");
	String uid = account.getStringAttribute("uid");

	List filterList = new ArrayList();
	
	if(appShortName != null){
		filterList.add(filter.ignoreCase(Filter.eq("name", appShortName + "-" + uid.trim())));
	}
	
	if(correlationKey != null){
		filterList.add(filter.ignoreCase(Filter.eq("uid", correlationKey)));
		filterList.add(filter.ignoreCase(Filter.eq("employeeNumber", correlationKey)));
		filterList.add(filter.ignoreCase(Filter.eq("email", correlationKey)));
		
		/*
		set correlation for secondary account
		*/
		int corrKeyLen = correlationKey.length();
		if(corrKeyLen > 1){
			String  corrKeyLastChar = correlationKey.subString(corrKeyLen - 1);
			if(corrKeyLastChar != null &amp;&amp; (corrKeyLastChar.equalsIgnoreCase("p") || corrKeyLastChar.equalsIgnoreCase("A"))){
				filterList.add(filter.ignoreCase(Filter.eq("uid", correlationKey.subString(0, correlationKey.length()-1))));
			}
		}
	}
	
	QueryOptions options = new QueryOptions();
	
	if(filterList.size() > 0){
		options.addFilter(Filter.or(filterList));
		Iterator iterator = context.search(Identity.class, options);
		if(null != iterator &amp;&amp; iterator.hasNext()){
			targetIdentity = (Iterator) iterator.next();
			correlationMap.put("identity", targetIdentity);
		}
	}
	
	
	//return map
	return correlationMap;
	</Source>
</Rule>
