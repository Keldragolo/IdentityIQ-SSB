<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Password Validation Rule" type="Validation">
  <Description>This rule is used to validate the Field values on a provisioning plan.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
            The Identity object being provisioned.
        </Description>
      </Argument>
      <Argument name="app">
        <Description>
            The Application object being processed.
        </Description>
      </Argument>
      <Argument name="form">
        <Description>
            The Form object being processed.
        </Description>
      </Argument>
      <Argument name="field">
        <Description>
            The Field object being validated.
        </Description>
      </Argument>
      <Argument name="value">
        <Description>
            The Object representing the field value.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          An Object (possibly a Collection) of messages resulting from the
          validation rule.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
   import sailpoint.api.PasswordPolice;
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import java.util.List;
  import java.util.ArrayList;
  import sailpoint.api.PasswordPolicyException;
  import sailpoint.tools.Util;
  import sailpoint.tools.Message;
  import sailpoint.tools.GeneralException;
  import sailpoint.object.*;

  sailpoint.api.PasswordPolice police = new sailpoint.api.PasswordPolice(context);
  List msgs = new ArrayList();

  try { 
    PasswordPolicy passwordPolicy = context.getObjectByName(PasswordPolicy.class, "AD Password Policy");
    police.checkPassword(null, passwordPolicy,value, null); 
    return null; 
  } 
  catch (PasswordPolicyException pe) {
    List messages = pe.getAllMessages();
    for (Message msg : messages) {
      msgs.add(msg.getMessage());
    }
  }
  catch (GeneralException ge) {
    msgs.add(ge.getMessage());
  }

  return ( Util.size(msgs) > 0 ) ? msgs: null;
</Source>
</Rule>
