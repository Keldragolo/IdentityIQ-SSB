<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="JDBC Global Provisioning Rule" type="JDBCOperationProvisioning">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult"/>
  <Source>
	import sailpoint.object.Identity;
	import java.sql.PreparedStatement;
	import java.util.Date;
	import sailpoint.object.ProvisioningPlan;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.Operation;
	import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
	import sailpoint.object.ProvisioningProject;
	import sailpoint.object.ProvisioningResult;

	ProvisioningResult result = new ProvisioningResult();
	Identity identity = plan.getIdentity();
	List accountRequests = plan.getAccountRequests();
	
	if (accountRequests != null &amp;&amp; accountRequests.size() > 0) {
		for (AccountRequest accountRequest : accountRequests) {
			if(ProvisioningPlan.AccountRequest.Operation.Create.equals(accountRequest.getOperation())){
				String sql = "insert into hr_emp(EmployeeID, givenName, sn, name, manager, mail, employeeNumber, enabled, title, info) values (?,?,?,?,?,?,?,?,?,?)";

				String eid = identity.getAttribute("uid");
				if(eid==null &amp;&amp; identity.getAttribute("uid")!=null ){
					eid=(String) identity.getAttribute("uid").toString();
				}

				String firstName = identity.getFirstname();
				if(firstName == null &amp;&amp; identity.getAttribute("firstname") != null){
					firstName = (String) identity.getAttribute("firstname").toString();
				}
				
				String lastName = identity.getLastname();
				if(lastName == null &amp;&amp; identity.getAttribute("lastname") != null){
					lastName = (String) identity.getAttribute("lastname").toString();
				}
				
				String email = identity.getEmail();
				if(email == null &amp;&amp; identity.getAttribute("email") != null){
					email = (String) identity.getAttribute("email").toString();
				}
				
				String fullName = "";
				if(identity.getAttribute("displayName") != null){
					fullName = (String) identity.getAttribute("displayName").toString();
				}
				
				String manager = "";
				if(identity.getManager() != null &amp;&amp; identity.getManager().getAttribute("uid") != null){
					manager = (String) identity.getManager().getAttribute("uid").toString();
				}
				
				String employeeNumber = "";
				if(identity.getAttribute("employeenumber") != null){
					employeeNumber = (String) identity.getAttribute("employeenumber").toString();
				}
				
				String title = "";
				if(identity.getAttribute("title") != null){
					title = (String) identity.getAttribute("title").toString();
				}
				
				String employeeType = "";
				if(identity.getAttribute("employeeType") != null){
					employeeType = (String) identity.getAttribute("employeeType").toString();
				}

				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setString(1, eid);
				
				int updateStatus = 0;
				try{
					updateStatus = ps.executeUpdate();
				}catch(SQLException){
					// if the user account exists in target system and account does not exists in IIQ, existing account will be updated.
					log.debug(".........Error...." +SQLException);
					result.setStatus(ProvisioningResult.STATUS_FAILED);
				}
				log.debug(".........request...." +updateStatus);
				if(updateStatus > 0){
					result.setStatus(ProvisioningResult.STATUS_COMMITTED);
					plan.setResult(result);
				}
			}
			
			if(ProvisioningPlan.AccountRequest.Operation.Modify.equals(accountRequest.getOperation())){
			
			}
			
			if(ProvisioningPlan.AccountRequest.Operation.Delete.equals(accountRequest.getOperation())){
				String sql = "DELETE FROM hr_emp WHERE EmployeeID = ?";

				String eid = identity.getAttribute("uid");
				if(eid==null &amp;&amp; identity.getAttribute("uid")!=null ){
					eid=(String) identity.getAttribute("uid").toString();
				}


				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setString(1, eid);
				
				int updateStatus = 0;
				try{
					updateStatus = ps.executeUpdate();
				}catch(SQLException){
					
				}
				log.debug(".........request...." +updateStatus);
				if(updateStatus > 0){
					result.setStatus(ProvisioningResult.STATUS_COMMITTED);
					plan.setResult(result);
				}
			}
				
		}
	}
	
	
</Source>
</Rule>
